// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: greeter.proto

package greeter

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Greeter service

type GreeterService interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error)
}

type greeterService struct {
	c    client.Client
	name string
}

func NewGreeterService(name string, c client.Client) GreeterService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "greeter"
	}
	return &greeterService{
		c:    c,
		name: name,
	}
}

func (c *greeterService) Hello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error) {
	req := c.c.NewRequest(c.name, "Greeter.Hello", in)
	out := new(HelloResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterHandler interface {
	Hello(context.Context, *HelloRequest, *HelloResponse) error
}

func RegisterGreeterHandler(s server.Server, hdlr GreeterHandler, opts ...server.HandlerOption) error {
	type greeter interface {
		Hello(ctx context.Context, in *HelloRequest, out *HelloResponse) error
	}
	type Greeter struct {
		greeter
	}
	h := &greeterHandler{hdlr}
	return s.Handle(s.NewHandler(&Greeter{h}, opts...))
}

type greeterHandler struct {
	GreeterHandler
}

func (h *greeterHandler) Hello(ctx context.Context, in *HelloRequest, out *HelloResponse) error {
	return h.GreeterHandler.Hello(ctx, in, out)
}

// Client API for Cinema service

type CinemaService interface {
	Req(ctx context.Context, in *CinemaRequest, opts ...client.CallOption) (*CinemaResponse, error)
}

type cinemaService struct {
	c    client.Client
	name string
}

func NewCinemaService(name string, c client.Client) CinemaService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "cinema"
	}
	return &cinemaService{
		c:    c,
		name: name,
	}
}

func (c *cinemaService) Req(ctx context.Context, in *CinemaRequest, opts ...client.CallOption) (*CinemaResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.Req", in)
	out := new(CinemaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cinema service

type CinemaHandler interface {
	Req(context.Context, *CinemaRequest, *CinemaResponse) error
}

func RegisterCinemaHandler(s server.Server, hdlr CinemaHandler, opts ...server.HandlerOption) error {
	type cinema interface {
		Req(ctx context.Context, in *CinemaRequest, out *CinemaResponse) error
	}
	type Cinema struct {
		cinema
	}
	h := &cinemaHandler{hdlr}
	return s.Handle(s.NewHandler(&Cinema{h}, opts...))
}

type cinemaHandler struct {
	CinemaHandler
}

func (h *cinemaHandler) Req(ctx context.Context, in *CinemaRequest, out *CinemaResponse) error {
	return h.CinemaHandler.Req(ctx, in, out)
}

// Client API for Movie service

type MovieService interface {
	Req(ctx context.Context, in *MovieRequest, opts ...client.CallOption) (*MovieResponse, error)
}

type movieService struct {
	c    client.Client
	name string
}

func NewMovieService(name string, c client.Client) MovieService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "movie"
	}
	return &movieService{
		c:    c,
		name: name,
	}
}

func (c *movieService) Req(ctx context.Context, in *MovieRequest, opts ...client.CallOption) (*MovieResponse, error) {
	req := c.c.NewRequest(c.name, "Movie.Req", in)
	out := new(MovieResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Movie service

type MovieHandler interface {
	Req(context.Context, *MovieRequest, *MovieResponse) error
}

func RegisterMovieHandler(s server.Server, hdlr MovieHandler, opts ...server.HandlerOption) error {
	type movie interface {
		Req(ctx context.Context, in *MovieRequest, out *MovieResponse) error
	}
	type Movie struct {
		movie
	}
	h := &movieHandler{hdlr}
	return s.Handle(s.NewHandler(&Movie{h}, opts...))
}

type movieHandler struct {
	MovieHandler
}

func (h *movieHandler) Req(ctx context.Context, in *MovieRequest, out *MovieResponse) error {
	return h.MovieHandler.Req(ctx, in, out)
}

// Client API for Reservation service

type ReservationService interface {
	Req(ctx context.Context, in *ReservationRequest, opts ...client.CallOption) (*ReservationResponse, error)
}

type reservationService struct {
	c    client.Client
	name string
}

func NewReservationService(name string, c client.Client) ReservationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "reservation"
	}
	return &reservationService{
		c:    c,
		name: name,
	}
}

func (c *reservationService) Req(ctx context.Context, in *ReservationRequest, opts ...client.CallOption) (*ReservationResponse, error) {
	req := c.c.NewRequest(c.name, "Reservation.Req", in)
	out := new(ReservationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reservation service

type ReservationHandler interface {
	Req(context.Context, *ReservationRequest, *ReservationResponse) error
}

func RegisterReservationHandler(s server.Server, hdlr ReservationHandler, opts ...server.HandlerOption) error {
	type reservation interface {
		Req(ctx context.Context, in *ReservationRequest, out *ReservationResponse) error
	}
	type Reservation struct {
		reservation
	}
	h := &reservationHandler{hdlr}
	return s.Handle(s.NewHandler(&Reservation{h}, opts...))
}

type reservationHandler struct {
	ReservationHandler
}

func (h *reservationHandler) Req(ctx context.Context, in *ReservationRequest, out *ReservationResponse) error {
	return h.ReservationHandler.Req(ctx, in, out)
}

// Client API for Showing service

type ShowingService interface {
	Req(ctx context.Context, in *ShowingRequest, opts ...client.CallOption) (*ShowingResponse, error)
}

type showingService struct {
	c    client.Client
	name string
}

func NewShowingService(name string, c client.Client) ShowingService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "showing"
	}
	return &showingService{
		c:    c,
		name: name,
	}
}

func (c *showingService) Req(ctx context.Context, in *ShowingRequest, opts ...client.CallOption) (*ShowingResponse, error) {
	req := c.c.NewRequest(c.name, "Showing.Req", in)
	out := new(ShowingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Showing service

type ShowingHandler interface {
	Req(context.Context, *ShowingRequest, *ShowingResponse) error
}

func RegisterShowingHandler(s server.Server, hdlr ShowingHandler, opts ...server.HandlerOption) error {
	type showing interface {
		Req(ctx context.Context, in *ShowingRequest, out *ShowingResponse) error
	}
	type Showing struct {
		showing
	}
	h := &showingHandler{hdlr}
	return s.Handle(s.NewHandler(&Showing{h}, opts...))
}

type showingHandler struct {
	ShowingHandler
}

func (h *showingHandler) Req(ctx context.Context, in *ShowingRequest, out *ShowingResponse) error {
	return h.ShowingHandler.Req(ctx, in, out)
}

// Client API for User service

type UserService interface {
	Req(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "user"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Req(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "User.Req", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	Req(context.Context, *UserRequest, *UserResponse) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		Req(ctx context.Context, in *UserRequest, out *UserResponse) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) Req(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserHandler.Req(ctx, in, out)
}
